// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizApp.Infrastructure.Persistence.Context;

#nullable disable

namespace QuizApp.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20250925185418_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Quiz")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizApp.Domain.Entities.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Attempts", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.AttemptItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("AnsweredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uuid");

                    b.Property<int>("AwardedScore")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("AttemptId", "QuestionId")
                        .IsUnique();

                    b.ToTable("AttemptItems", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.AttemptItemChoice", b =>
                {
                    b.Property<Guid>("AttemptItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChoiceId")
                        .HasColumnType("uuid");

                    b.HasKey("AttemptItemId", "ChoiceId");

                    b.HasIndex("ChoiceId");

                    b.ToTable("AttemptItemChoices", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.AttemptItemText", b =>
                {
                    b.Property<Guid>("AttemptItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubmittedText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AttemptItemId");

                    b.ToTable("AttemptItemTexts", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimeInSeconds")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Quizzes", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestionChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestionChoices", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestionText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuizQuestionTexts", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizTag", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("QuizId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("QuizTags", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Tags", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Attempt", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Attempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.User", "User")
                        .WithMany("Attempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.AttemptItem", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Attempt", "Attempt")
                        .WithMany("Items")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.QuizQuestion", "Question")
                        .WithMany("AttemptItems")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.AttemptItemChoice", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.AttemptItem", "AttemptItem")
                        .WithMany("SelectedChoices")
                        .HasForeignKey("AttemptItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.QuizQuestionChoice", "Choice")
                        .WithMany("AttemptItemChoices")
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttemptItem");

                    b.Navigation("Choice");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.AttemptItemText", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.AttemptItem", "AttemptItem")
                        .WithOne("TextAnswer")
                        .HasForeignKey("QuizApp.Domain.Entities.AttemptItemText", "AttemptItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttemptItem");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Quiz", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.User", "CreatedBy")
                        .WithMany("QuizzesCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestion", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.User", "CreatedBy")
                        .WithMany("QuestionsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestionChoice", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.QuizQuestion", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestionText", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.QuizQuestion", "Question")
                        .WithOne("TextAnswer")
                        .HasForeignKey("QuizApp.Domain.Entities.QuizQuestionText", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizTag", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizTags")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.Tag", "Tag")
                        .WithMany("QuizTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Tag", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.User", "CreatedBy")
                        .WithMany("TagsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Attempt", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.AttemptItem", b =>
                {
                    b.Navigation("SelectedChoices");

                    b.Navigation("TextAnswer");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("Questions");

                    b.Navigation("QuizTags");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestion", b =>
                {
                    b.Navigation("AttemptItems");

                    b.Navigation("Choices");

                    b.Navigation("TextAnswer");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizQuestionChoice", b =>
                {
                    b.Navigation("AttemptItemChoices");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Tag", b =>
                {
                    b.Navigation("QuizTags");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("QuestionsCreated");

                    b.Navigation("QuizzesCreated");

                    b.Navigation("TagsCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
